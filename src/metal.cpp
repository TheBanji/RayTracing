////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "metal.hpp"
#include "sphere.hpp"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Metal::Metal(Texture * texture, double fuzz) : _texture(texture), _fuzz(fuzz) {//const Color& albedo, double fuzz) : _albedo(albedo), _fuzz(fuzz) {
    if(_fuzz > 1.0) {
        _fuzz = 1.0;
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Metal::scatter(const Ray& shotRay, const Point& intersectionPoint, const Vector& normalVector, Ray& scatteredRay, Color& attenuation, const Point& sphereCenter, double sphereRadius) const {
    scatteredRay = Ray(intersectionPoint, shotRay.getDir().reflect(normalVector) + Sphere::random_point(_fuzz));
    attenuation  = (*_texture)(0, 0, intersectionPoint);//_albedo;
    return (scatteredRay.getDir().dot(normalVector) > 0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////